---
swagger: 2.0
info:
  title: AwsServerlessExpressApi
basePath: /Prod
schemes:
- https
paths:
  /api/:
    x-amazon-apigateway-any-method:
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${stageVariables.ServiceApiFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'https://example.com'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /api/{proxy+}:
    x-amazon-apigateway-any-method:
      produces:
      - application/json
      parameters:
      - name: proxy
        in: path
        required: true
        type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${stageVariables.ServiceApiFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'https://example.com'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /obd:
    get:
    # x-amazon-apigateway-any-method:
      produces:
      - application/json
    #   parameters:
    #   - name: proxy
    #     in: path
    #     required: true
    #     type: string
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        type: AWS
        # uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${stageVariables.ServiceApiFunction}/invocations
        # uri: "arn:aws:apigateway:us-east-1:dynamodb:action/Scan"
        uri: "arn:aws:apigateway:us-east-1:dynamodb:action/PutItem"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/${stageVariables.DbRole}"
        # credentials: "arn:aws:iam::173028852725:role/TorqueServerless-ObdLogsAPIRole-9HVTQ05XBFX9"
        # credentials: "${stageVariables.DbRole}"
        # credentials: { "Fn::GetAtt": [ ObdLogsAPIRole, Arn ] }
        # credentials: { "Fn::GetAtt": [ ObdLogsAPIRole, Arn ] }
        requestTemplates:
          # application/json: |-
          #   sadf
          #   sda!FindInMap fsd
          application/json: |
            {
                "aaa":"$stageVariables",
                "TableName": "$stageVariables.Db",
                "Item":{
                  "pk":{
                    "S": "$input.params.querystring.pk"
                  },
                  "pk":{
                    "N": "$input.params().querystring.get('id')"
                  },
                  "ff":{
                    "S": "$input.params().querystring"
                  },
                  "xx":{
                      #foreach($p in $input.params().querystring.keySet())
                        #if($input.params().querystring.get($p) != "")
                          "$p" : {"S":"$input.params().querystring.get($p)"}
                        #end
                        #if($foreach.hasNext && $input.params().querystring.get($input.params().querystring.keySet()[$foreach.count]) == "" ),#end
                      #end
                  }
                }
            }
        responses: {
            "default": {
              "statusCode": "200"
              # "responseTemplates": {
              #   "application/json": "#set($inputRoot = $input.path('$'))\n[\n    #foreach($elem in $inputRoot.Items) {\n        \"id\": \"$elem.id.S\",\n        \"given_name\": \"$elem.given_name.S\",\n        \"description\": \"$elem.description.S\",\n        \"website_url\": \"$elem.website_url.S\"\n    }#if($foreach.hasNext),#end\n#end\n]"
              # }
            }
          }
        
        passthroughBehavior: when_no_match

            # responseTemplates:
            #   application/json: '#set($inputRoot = $input.path("$"))
            #     {
            #         "id": "$context.requestId"
            #     }'

      # x-amazon-apigateway-integration:
      #   uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${stageVariables.ServiceApiFunction}/invocations
      #   httpMethod: POST
      #   type: aws_proxy
    # options:
    #   consumes:
    #   - application/json
    #   produces:
    #   - application/json
    #   responses:
    #     200:
    #       description: 200 response
    #       schema:
    #         $ref: "#/definitions/Empty"
    #       headers:
    #         Access-Control-Allow-Origin:
    #           type: string
    #         Access-Control-Allow-Methods:
    #           type: string
    #         Access-Control-Allow-Headers:
    #           type: string
    #   x-amazon-apigateway-integration:
    #     contentHandling: CONVERT_TO_TEXT
    #     responses:
    #       default:
    #         statusCode: 200
    #         responseParameters:
    #           method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
    #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
    #           method.response.header.Access-Control-Allow-Origin: "'https://example.com'"
    #     passthroughBehavior: when_no_match
    #     requestTemplates:
    #       application/json: "{\"statusCode\": 200}"
    #     type: mock
x-amazon-apigateway-binary-media-types:
  - '*/*'
definitions:
  Empty:
    type: object
    title: Empty Schema
